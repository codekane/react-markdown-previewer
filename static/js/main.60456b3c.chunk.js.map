{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["MarkdownOutput","props","id","class","dangerouslySetInnerHTML","markdown","output","__html","marked","App","useState","input","setInput","className","onChange","event","target","value","console","log","bind","this","onClick","document","getElementById","classList","add","remove","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"gNAAe,I,4BC6Gf,SAASA,EAAeC,GACtB,OACE,qBAAKC,GAAG,UAAUC,MAAM,UACtBC,yBARkBC,EAQsBJ,EAAMK,OAP3C,CAACC,OAAQC,IAAOH,OADzB,IAAwBA,EAgETI,MAjDf,WAAgB,IAAD,EACaC,mBAnHZ,mkIAkHD,mBACNC,EADM,KACCC,EADD,KAqBb,OAEE,qBAAKC,UAAU,MAAf,SACE,sBAAKA,UAAU,kBAAf,UACE,wDACA,sBAAKA,UAAU,MAAf,UACE,qBAAKV,MAAM,8BAAX,SACE,0BAAUD,GAAG,SACXY,SA1BZ,SAAsBC,GACpBH,EAASG,EAAMC,OAAOC,OAEtBC,QAAQC,IAAIJ,EAAMC,OAAOC,QAuBQG,KAAKC,MAD9B,SAEGV,MAIL,qBAAKR,MAAM,8BAAX,SACE,cAACH,EAAD,CAAgBM,OAAQK,SAG5B,sBAAKR,MAAM,MAAMD,GAAG,aAApB,UACE,wBAAQA,GAAG,cACHoB,QA1BhB,SAA0BP,GACxBQ,SAASC,eAAe,WAAWC,UAAUC,IAAI,WACjDH,SAASC,eAAe,UAAUC,UAAUE,OAAO,YAwBXP,KAAKC,MADvC,kBAEA,wBAAQnB,GAAG,iBACHoB,QAjChB,SAA6BP,GAC3BQ,SAASC,eAAe,UAAUC,UAAUC,IAAI,WAChDH,SAASC,eAAe,WAAWC,UAAUE,OAAO,YA+BTP,KAAKC,MAD1C,8BCpJKO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAGFhB,SAASC,eAAe,SAM1BI,M","file":"static/js/main.60456b3c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport React, { useState } from 'react';\nimport marked from 'marked';\n\nvar instructions = `\n# Why\nI write a lot in Markdown. [Typora](https://typora.io/) is my preferred app, which, unlike this app has the editor and the previewer rolled into one. It's very good, and I recommend it highly, however what I've sought to do here isn't to build the best app for writing Markdown. What I've sought to do here is to finish a React project for the [freecodecamp](https://www.freecodecamp.org/) module I've been working on.\n\nMarkdown is (counter-intuitively) a markup language. It compiles into HTML, PDF, or virtually any other format, yet it can be written using a simple text editor. The reason I prefer it to most word processors is the lack of formatting. The lack of obtuse formatting, I mean. The output can be flavoured with CSS to look any way you want it, which can be a bit more work, but is infinitely more maintainable than something like a Word Document. There are a variety of blogging engines set up to work with markdown files (looking at you [jekyllrb](https://jekyllrb.com/)\\) and parsers are readily available to integrate it into your projects.\n\n## Headers\n\n    #, ##, ###, ####, #####, ######  \nThose are all the different header levels. Use them at the start of a line, and then add a space afterwards to enclose that line within header tags.\n\n## Line Breaks\nBy default, if you press enter after a line it is not treated as a true line break.\nThat means spaces are inserted in between that line, and this line, however it does not go to the next line proper. To do that, you need to add either  \ntwo spaces\n\n-OR-\n\nadd an empty line in between. Both do the same thing.\n\n## Links\nIf you read above you'll notice the syntax for links, but I'll point it out for you anyway.  \n    [text for link](target url)\n\n## Flavour\nSurround the text you wish to embolden with either two asterisks (*) or two underscores (_)   \n**LIKE** __THIS__\n\nTo italicize, use only one asterisk (*) or one underscore (_)   \n*like* _this_\n\n## Code Blocks\nBackticks are the way here. \\`<div id=\"text\">text</div>\\` One \\` at the start, and one \\` at the end of a statement will mark it as code, and it will automatically be escaped. Here's an example of that same statement without codeblocks: <div id=\"text\">text</div>\n\nThis is probably a good time to let you know that you can write HTML inside markdown, to extend the (admittedly limited) options available within the markdown syntax itself.\n\nThree backticks (\\\\\\`\\\\\\`\\\\\\`) enables multiline mode, and continues until you conclude the statement with three backticks (\\\\\\`\\\\\\`\\\\\\`).\n\n\\`\\`\\` \n<div><p><b>this is a multi-line codeblock</b></p></div> \n\n\\`\\`\\`\n\n\n## Lists\nDenote an unordered list item with either - or *\n- It doesn't matter\n* See?\n\nIndent list items to denote a sub-list\n- This is an example\n    - This is a sub-example\n        - This is a sub-sub example (assume 4 spaces to count as indent)\n\nOrdered lists like so:\n1) Don't talk about Fight Club\n2) Don't talk about Fight Club\n\n\n\n## Blockquotes\nIf this were 4chan, the text below would be green:\n> Greentext goes here  \n> All of the same line indentation rules apply.\n> See. Same line.\n\n## Images & Tables\nIf you've made it this far, I'll give you a trick to give the illusion of a figure on an image without actually having one.\n\n| ![Pidgey has Fainted](https://i.imgur.com/r4Adts4.jpg) |\n| :--: |\n| *Pidgey has Fainted* |\n\nThis uses tables, which I will now explain.\n\n\\\\\\`\\\\\\`\\\\\\`\n| Table Header 1 | Table Header 2 | Table Header 3 |\n| :--: | :--: | :--: |\n|The middle code centers the contents of the table| Nothing| Nothing |\n\n\\\\\\`\\\\\\`\\\\\\`\n| Table Header 1 | Table Header 2 | Table Header 3 |\n| :--: | -- | :--: |\n|The middle code centers the contents of the table| Nothing| Nothing |\n\n## In Conclusion\nCheers for making it to the end. I made the actual meat and bones of this app a while ago, but I was a little embarassed by how slack-jawed the actual writing in it was, so I postponed publishing until I could take some time to do it right. I hope you enjoyed.\n\nFor more information: [Markdown Cheatsheet](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet)\n`\n\nfunction MarkdownInput(props) {\n  return (\n    <textarea id=\"editor\" style={{width: \"100%\", height: \"450px\"}}>\n      {props.input}\n    </textarea>\n  )\n}\n\nfunction renderMarkdown(markdown) {\n  return {__html: marked(markdown)}\n}\n\n\nfunction MarkdownOutput(props) {\n  return (\n    <div id=\"preview\" class=\"sm-hide\"\n      dangerouslySetInnerHTML={renderMarkdown(props.output)}>\n    </div>\n  )\n\n}\n\n\nfunction App() {\n  const [input, setInput] = useState(instructions);\n\n  function handleChange(event) {\n    setInput(event.target.value);\n\n    console.log(event.target.value)\n  }\n\n  function handlePreviewButton(event) {\n    document.getElementById(\"editor\").classList.add(\"sm-hide\");\n    document.getElementById(\"preview\").classList.remove(\"sm-hide\");\n  }\n\n  function handleEditButton(event) {\n    document.getElementById(\"preview\").classList.add(\"sm-hide\");\n    document.getElementById(\"editor\").classList.remove(\"sm-hide\");\n  }\n\n\n\n  return (\n\n    <div className=\"App\">\n      <div className=\"container-fluid\">\n        <header>Markdown Previewer</header>\n        <div className=\"row\">\n          <div class=\"col-md-6 col-sm-12 app-pane\">\n            <textarea id=\"editor\"\n              onChange={handleChange.bind(this)}>\n              {input}\n            </textarea>\n\n          </div>\n          <div class=\"col-md-6 col-sm-12 app-pane\">\n            <MarkdownOutput output={input}/>\n          </div>\n        </div>\n        <div class=\"row\" id=\"button-row\">\n          <button id=\"edit-button\"\n                  onClick={handleEditButton.bind(this)}>Edit</button>\n          <button id=\"preview-button\"\n                  onClick={handlePreviewButton.bind(this)}>Preview</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}